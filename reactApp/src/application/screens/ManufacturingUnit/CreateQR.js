import React, { Component } from 'react';
import { connect } from 'react-redux';
import { cloneDeep } from 'lodash';
import { Card } from 'react-bootstrap';

import FabricTextField from '../../components/Inputs/FabricTextField';
import FabricButton from '../../components/Button/FabricButton';
import { validateQRName } from '../../actions/ManufacturerActions';
import FabricButtonPrimary from '../../components/Button/FabricButtonPrimary';

const initialForm = {
  name: '',
  item: '',
  senderID: 'ManufacturerID_3692',
  receiverID: '',
  message: '',
  createdBy: 'ManufacturerID_3692'
};

class CreateQR extends Component {
  state = {
    form: initialForm,
    formErrors: initialForm,
    disableNext: true
  };

  fieldChanged = (key, e) => {
    const { form } = this.state;
    const { value } = e.target;

    const formClone = cloneDeep(form);
    formClone[key] = value;

    this.setState({ form: formClone });

    if (key === 'name') {
      this.checkIfNameValid();
    }
  };

  checkIfNameValid = () => {
    const { form, formErrors } = this.state;
    const formErrorsClone = cloneDeep(formErrors);
    const { dispatch } = this.props;
    const { name } = form;
    dispatch(validateQRName(name)).then(APIResponse => {
      console.log('APIResponse', APIResponse);
      if (APIResponse.canCreate) {
        formErrorsClone.name = '';
        this.setState({ disableNext: false });
      } else {
        formErrorsClone.name = 'Name Already Exists';
        this.setState({ disableNext: true });
      }
    });
  };

  render() {
    const { onDismiss } = this.props;
    const { form, disableNext, formErrors } = this.state;
    console.log('form', this.state);
    return (
      <div>
        <Card className="text-center">
          <Card.Header>
This QR is Generated By :
            {form.senderID}
          </Card.Header>
          <Card.Body>
            <Card.Title>Create QR Form</Card.Title>
            <FabricTextField
              label="QR Name"
              errorMessage={formErrors.name}
              onChange={e => this.fieldChanged('name', e)}
              value={form.name}
            />
            <FabricTextField
              label="Item"
              // errorMessage={formErrors.item}
              onChange={e => this.fieldChanged('item', e)}
              value={form.item}
            />
            <FabricTextField
              label="Sender ID"
              // errorMessage={formErrors.senderID}
              isReadOnly
              // onChange={e => this.fieldChanged('senderID', e)}
              value={form.senderID}
            />
          </Card.Body>
          <Card.Footer className="text-muted">
            <FabricButton text="Cancel" onClick={onDismiss} />
            <FabricButtonPrimary
              text="Save"
              // onClick={this.checkIfNameValid}
              disabled={form.name === '' || disableNext}
            />
          </Card.Footer>
        </Card>
      </div>
    );
  }
}

export default connect()(CreateQR);
